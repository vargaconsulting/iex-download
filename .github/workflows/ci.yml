name: CI

on:
  push:
    branches: [ release, staging ]
  pull_request:
    branches: [ release, staging ]

jobs:
  build:
    name: ${{ matrix.os }} / ${{ matrix.toolchain }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        #os: [ubuntu-22.04, ubuntu-24.04, macos-13, windows-latest]
        os: [ ubuntu-22.04 ]
        toolchain: [stable, beta, nightly, 1.80.0] # include MSRV if you want
        include:
          - toolchain: stable
            rust-version: stable
          - toolchain: beta
            rust-version: beta
          - toolchain: nightly
            rust-version: nightly
          - toolchain: 1.80.0
            rust-version: 1.80.0

    steps:
      - uses: actions/checkout@v4

      - name: Set badge output directory
        id: path
        run: |
          if [[ "${GITHUB_REF##*/}" == "staging" ]]; then
            echo "dir=status-staging" >> $GITHUB_OUTPUT
          else
            echo "dir=status" >> $GITHUB_OUTPUT
          fi

      - name: Check skip list
        id: skip_check
        run: |
          skip_list=(
            "windows-latest:beta"
            "macos-13:nightly"
          )
          combo="${{ matrix.os }}:${{ matrix.toolchain }}"
          echo "Checking combination: $combo"
          for skip in "${skip_list[@]}"; do
            if [[ "$combo" == "$skip" ]]; then
              echo "SKIP_COMPILE=true" >> "$GITHUB_ENV"
              exit 0
            fi
          done
          echo "SKIP_COMPILE=false" >> "$GITHUB_ENV"

      - name: Install Rust
        if: ${{ env.SKIP_COMPILE == 'false' }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust-version }}
          components: clippy,rustfmt

      - name: Cache Cargo
        if: ${{ env.SKIP_COMPILE == 'false' }}
        uses: Swatinem/rust-cache@v2

      - name: Build
        if: env.SKIP_COMPILE == 'false'
        run: cargo build --release --locked

      - name: Test
        if: env.SKIP_COMPILE == 'false'
        run: cargo test --all --locked --all-features

      - name: Record Badge Status
        if: always()
        run: |
          mkdir -p badge-status
          status="skipped"
          if [[ "$SKIP_COMPILE" == "false" ]]; then
            status="${{ job.status }}"
          fi
          cat <<EOF > badge-status/status-${{ matrix.os }}-${{ matrix.toolchain }}.json
          {
            "os": "${{ matrix.os }}",
            "toolchain": "${{ matrix.toolchain }}",
            "status": "$status"
          }
          EOF

      - name: Upload Status Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: status-${{ matrix.os }}-${{ matrix.toolchain }}
          path: badge-status/status-${{ matrix.os }}-${{ matrix.toolchain }}.json

  generate-badges:
    name: Generate SVG Badges
    runs-on: ubuntu-latest
    needs: build
    if: always()

    steps:
      - uses: actions/checkout@v4

      - name: Determine badge target directory
        id: badge_dir
        run: |
          if [[ "${GITHUB_REF##*/}" == "staging" ]]; then
            echo "dir=badges-staging" >> $GITHUB_OUTPUT
          else
            echo "dir=badges" >> $GITHUB_OUTPUT
          fi

      - name: Download all badge status artifacts
        uses: actions/download-artifact@v4
        with:
          path: badge-status
          pattern: status-*
          merge-multiple: true

      - name: Generate SVG Badges
        run: |
          mkdir -p ${{ steps.badge_dir.outputs.dir }}
          for f in badge-status/*.json; do
            [[ ! -f "$f" ]] && continue
            os=$(jq -r .os "$f")
            toolchain=$(jq -r .toolchain "$f")
            status=$(jq -r .status "$f")

            color="gray"
            symbol="□"
            prefix="na"

            [[ "$status" == "success" ]] && { symbol="✔"; color="green"; prefix="ok"; }
            [[ "$status" == "skipped" ]] && { symbol="○"; color="gray";  prefix="na"; }
            [[ "$status" == "failure" ]] && { symbol="✘"; color="red";   prefix="failed"; }

            label="${os}-${toolchain}"
            badge="${{ steps.badge_dir.outputs.dir }}/${label}.svg"
            curl -s "https://img.shields.io/badge/${label}-${symbol}-${color}.svg" -o "$badge"
          done

      - name: Upload badge folder to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./${{ steps.badge_dir.outputs.dir }}
          destination_dir: ${{ steps.badge_dir.outputs.dir }}
