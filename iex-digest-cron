#!/bin/env python
# ALL RIGHTS RESERVED.
# _________________________________________________________________________________
# NOTICE: All information contained  herein is, and remains the property  of  Varga
# Consulting and  its suppliers, if  any. The intellectual and  technical  concepts
# contained herein are proprietary to Varga Consulting and its suppliers and may be
# covered  by  Canadian and  Foreign Patents, patents in process, and are protected
# by  trade secret or copyright law. Dissemination of this information or reproduc-
# tion  of  this  material is strictly forbidden unless prior written permission is
# obtained from Varga Consulting.
#
# Copyright © <2017-2022> Varga Consulting, Toronto, On     info@vargaconsulting.ca
# _________________________________________________________________________________

import glob
from subprocess import PIPE, Popen
from pathlib import Path
import os
from os import rename
import argparse
import sys

def run(cmd: str) -> bool:
    shell_command = Popen(cmd, shell=True, stdout=PIPE, stderr=PIPE)
    (output, err) = shell_command.communicate()
    shell_command.wait()
    return shell_command.returncode == 0

def main():
    parser = argparse.ArgumentParser(description='''IEX-DIGEST-CRON
        Process pcap.gz files and converts them into regular or irregular time series using iex2h5.''',
        epilog="Copyright © <2017-2022> Varga Consulting, Toronto, ON. info@vargaconsulting.ca"
    )

    parser.add_argument("--input-dir", required=True, help="Directory containing input pcap.gz files")
    parser.add_argument("--output-file", required=True, help="Output H5 file path")
    parser.add_argument("--cmd-bin", default="/usr/local/bin/iex2h5", help="Path to the iex2h5 binary")
    parser.add_argument("--decompressor", default="unpigz -c", help="Decompression command for input files")
    parser.add_argument("--time-interval", type=int, default=60, help="Time interval argument for iex2h5")
    parser.add_argument("--group", type=int, default=5, help="Group size argument for iex2h5")
    parser.add_argument("--processed-dir", default="/lake/iex/tops", help="Directory to move processed files")
    parser.add_argument("--command-assets", default="assets", help="Command for initializing assets")
    parser.add_argument("--command-rts", default="rts", help="Command for processing RTS data")
    parser.add_argument("--command-index", default="index", help="Command for re-indexing the database")
    
    args = parser.parse_args()

    input_files = glob.glob(f"{args.input_dir}/TOPS-*.pcap.gz")
    if not input_files:
        sys.exit(0)  # Exit if no files to process
    
    input_files.sort(key=lambda x: x)  # Sort by dates
    
    cmd_template = (
        f"{args.decompressor} %s | {args.cmd_bin} -g {args.group} "
        f"--time-interval {args.time_interval} -o {args.output_file} --command %s"
    )
    
    output_path = Path(args.output_file)
    
    if not output_path.is_file():
        run(cmd_template % (input_files[-1], args.command_assets))
    
    for source in input_files:
        if run(cmd_template % (source, args.command_rts)):
            print(os.path.basename(source))
            rename(source, f"{args.processed_dir}/{os.path.basename(source)}")
    
    # Re-index the database
    run(cmd_template % (input_files[-1], args.command_index))
    sys.exit(0)

if __name__ == "__main__":
    main()
